import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { FilterMatchMode } from './filtermatchmode';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class PrimeNGConfig {
    constructor() {
        this.ripple = false;
        this.filterMatchModeOptions = {
            text: [
                FilterMatchMode.STARTS_WITH,
                FilterMatchMode.CONTAINS,
                FilterMatchMode.NOT_CONTAINS,
                FilterMatchMode.ENDS_WITH,
                FilterMatchMode.EQUALS,
                FilterMatchMode.NOT_EQUALS
            ],
            numeric: [
                FilterMatchMode.EQUALS,
                FilterMatchMode.NOT_EQUALS,
                FilterMatchMode.LESS_THAN,
                FilterMatchMode.LESS_THAN_OR_EQUAL_TO,
                FilterMatchMode.GREATER_THAN,
                FilterMatchMode.GREATER_THAN_OR_EQUAL_TO
            ],
            date: [
                FilterMatchMode.IS,
                FilterMatchMode.IS_NOT,
                FilterMatchMode.BEFORE,
                FilterMatchMode.AFTER
            ]
        };
        this.translation = {
            startsWith: 'Starts with',
            contains: 'Contains',
            notContains: 'Not contains',
            endsWith: 'Ends with',
            equals: 'Equals',
            notEquals: 'Not equals',
            noFilter: 'No Filter',
            lt: 'Less than',
            lte: 'Less than or equal to',
            gt: 'Greater than',
            gte: 'Greater than or equal to',
            is: 'Is',
            isNot: 'Is not',
            before: 'Before',
            after: 'After',
            clear: 'Clear',
            apply: 'Apply',
            matchAll: 'Match All',
            matchAny: 'Match Any',
            addRule: 'Add Rule',
            removeRule: 'Remove Rule',
            accept: 'Yes',
            reject: 'No',
            choose: 'Choose',
            upload: 'Upload',
            cancel: 'Cancel',
            dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
            monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            today: 'Today',
            weekHeader: 'Wk'
        };
        this.translationSource = new Subject();
        this.translationObserver = this.translationSource.asObservable();
    }
    getTranslation(key) {
        return this.translation[key];
    }
    setTranslation(value) {
        this.translation = Object.assign(Object.assign({}, this.translation), value);
        this.translationSource.next(this.translation);
    }
}
PrimeNGConfig.ɵfac = function PrimeNGConfig_Factory(t) { return new (t || PrimeNGConfig)(); };
PrimeNGConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function PrimeNGConfig_Factory() { return new PrimeNGConfig(); }, token: PrimeNGConfig, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PrimeNGConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbWVuZ2NvbmZpZy5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FwcC9jb21wb25lbnRzL2FwaS9wcmltZW5nY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDcEQ7O0FBR0EsTUFBTSxPQUFPLGFBQWE7QUFDMUIsSUFGQTtBQUFnQixRQUdaLFdBQU0sR0FBWSxLQUFLLENBQUM7QUFDNUIsUUFDSSwyQkFBc0IsR0FBRztBQUM3QixZQUFRLElBQUksRUFBRTtBQUNkLGdCQUFZLGVBQWUsQ0FBQyxXQUFXO0FBQ3ZDLGdCQUFZLGVBQWUsQ0FBQyxRQUFRO0FBQ3BDLGdCQUFZLGVBQWUsQ0FBQyxZQUFZO0FBQ3hDLGdCQUFZLGVBQWUsQ0FBQyxTQUFTO0FBQ3JDLGdCQUFZLGVBQWUsQ0FBQyxNQUFNO0FBQ2xDLGdCQUFZLGVBQWUsQ0FBQyxVQUFVO0FBQ3RDLGFBQVM7QUFDVCxZQUFRLE9BQU8sRUFBRTtBQUNqQixnQkFBWSxlQUFlLENBQUMsTUFBTTtBQUNsQyxnQkFBWSxlQUFlLENBQUMsVUFBVTtBQUN0QyxnQkFBWSxlQUFlLENBQUMsU0FBUztBQUNyQyxnQkFBWSxlQUFlLENBQUMscUJBQXFCO0FBQ2pELGdCQUFZLGVBQWUsQ0FBQyxZQUFZO0FBQ3hDLGdCQUFZLGVBQWUsQ0FBQyx3QkFBd0I7QUFDcEQsYUFBUztBQUNULFlBQVEsSUFBSSxFQUFFO0FBQ2QsZ0JBQVksZUFBZSxDQUFDLEVBQUU7QUFDOUIsZ0JBQVksZUFBZSxDQUFDLE1BQU07QUFDbEMsZ0JBQVksZUFBZSxDQUFDLE1BQU07QUFDbEMsZ0JBQVksZUFBZSxDQUFDLEtBQUs7QUFDakMsYUFBUztBQUNULFNBQUssQ0FBQztBQUNOLFFBQ1ksZ0JBQVcs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ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEZpbHRlck1hdGNoTW9kZSB9IGZyb20gJy4vZmlsdGVybWF0Y2htb2RlJztcbmltcG9ydCB7IFRyYW5zbGF0aW9uIH0gZnJvbSAnLi90cmFuc2xhdGlvbic7XG5cbkBJbmplY3RhYmxlKHtwcm92aWRlZEluOiAncm9vdCd9KVxuZXhwb3J0IGNsYXNzIFByaW1lTkdDb25maWcge1xuXG4gICAgcmlwcGxlOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBmaWx0ZXJNYXRjaE1vZGVPcHRpb25zID0ge1xuICAgICAgICB0ZXh0OiBbXG4gICAgICAgICAgICBGaWx0ZXJNYXRjaE1vZGUuU1RBUlRTX1dJVEgsXG4gICAgICAgICAgICBGaWx0ZXJNYXRjaE1vZGUuQ09OVEFJTlMsXG4gICAgICAgICAgICBGaWx0ZXJNYXRjaE1vZGUuTk9UX0NPTlRBSU5TLFxuICAgICAgICAgICAgRmlsdGVyTWF0Y2hNb2RlLkVORFNfV0lUSCxcbiAgICAgICAgICAgIEZpbHRlck1hdGNoTW9kZS5FUVVBTFMsXG4gICAgICAgICAgICBGaWx0ZXJNYXRjaE1vZGUuTk9UX0VRVUFMU1xuICAgICAgICBdLFxuICAgICAgICBudW1lcmljOiBbXG4gICAgICAgICAgICBGaWx0ZXJNYXRjaE1vZGUuRVFVQUxTLFxuICAgICAgICAgICAgRmlsdGVyTWF0Y2hNb2RlLk5PVF9FUVVBTFMsXG4gICAgICAgICAgICBGaWx0ZXJNYXRjaE1vZGUuTEVTU19USEFOLFxuICAgICAgICAgICAgRmlsdGVyTWF0Y2hNb2RlLkxFU1NfVEhBTl9PUl9FUVVBTF9UTyxcbiAgICAgICAgICAgIEZpbHRlck1hdGNoTW9kZS5HUkVBVEVSX1RIQU4sXG4gICAgICAgICAgICBGaWx0ZXJNYXRjaE1vZGUuR1JFQVRFUl9USEFOX09SX0VRVUFMX1RPXG4gICAgICAgIF0sXG4gICAgICAgIGRhdGU6IFtcbiAgICAgICAgICAgIEZpbHRlck1hdGNoTW9kZS5JUyxcbiAgICAgICAgICAgIEZpbHRlck1hdGNoTW9kZS5JU19OT1QsXG4gICAgICAgICAgICBGaWx0ZXJNYXRjaE1vZGUuQkVGT1JFLFxuICAgICAgICAgICAgRmlsdGVyTWF0Y2hNb2RlLkFGVEVSXG4gICAgICAgIF1cbiAgICB9O1xuXG4gICAgcHJpdmF0ZSB0cmFuc2xhdGlvbjogVHJhbnNsYXRpb24gPSB7XG4gICAgICAgIHN0YXJ0c1dpdGg6ICdTdGFydHMgd2l0aCcsXG4gICAgICAgIGNvbnRhaW5zOiAnQ29udGFpbnMnLFxuICAgICAgICBub3RDb250YWluczogJ05vdCBjb250YWlucycsXG4gICAgICAgIGVuZHNXaXRoOiAnRW5kcyB3aXRoJyxcbiAgICAgICAgZXF1YWxzOiAnRXF1YWxzJyxcbiAgICAgICAgbm90RXF1YWxzOiAnTm90IGVxdWFscycsXG4gICAgICAgIG5vRmlsdGVyOiAnTm8gRmlsdGVyJyxcbiAgICAgICAgbHQ6ICdMZXNzIHRoYW4nLFxuICAgICAgICBsdGU6ICdMZXNzIHRoYW4gb3IgZXF1YWwgdG8nLFxuICAgICAgICBndDogJ0dyZWF0ZXIgdGhhbicsXG4gICAgICAgIGd0ZTogJ0dyZWF0ZXIgdGhhbiBvciBlcXVhbCB0bycsXG4gICAgICAgIGlzOiAnSXMnLFxuICAgICAgICBpc05vdDogJ0lzIG5vdCcsXG4gICAgICAgIGJlZm9yZTogJ0JlZm9yZScsXG4gICAgICAgIGFmdGVyOiAnQWZ0ZXInLFxuICAgICAgICBjbGVhcjogJ0NsZWFyJyxcbiAgICAgICAgYXBwbHk6ICdBcHBseScsXG4gICAgICAgIG1hdGNoQWxsOiAnTWF0Y2ggQWxsJyxcbiAgICAgICAgbWF0Y2hBbnk6ICdNYXRjaCBBbnknLFxuICAgICAgICBhZGRSdWxlOiAnQWRkIFJ1bGUnLFxuICAgICAgICByZW1vdmVSdWxlOiAnUmVtb3ZlIFJ1bGUnLFxuICAgICAgICBhY2NlcHQ6ICdZZXMnLFxuICAgICAgICByZWplY3Q6ICdObycsXG4gICAgICAgIGNob29zZTogJ0Nob29zZScsXG4gICAgICAgIHVwbG9hZDogJ1VwbG9hZCcsXG4gICAgICAgIGNhbmNlbDogJ0NhbmNlbCcsXG4gICAgICAgIGRheU5hbWVzOiBbXCJTdW5kYXlcIiwgXCJNb25kYXlcIiwgXCJUdWVzZGF5XCIsIFwiV2VkbmVzZGF5XCIsIFwiVGh1cnNkYXlcIiwgXCJGcmlkYXlcIiwgXCJTYXR1cmRheVwiXSxcbiAgICAgICAgZGF5TmFtZXNTaG9ydDogW1wiU3VuXCIsIFwiTW9uXCIsIFwiVHVlXCIsIFwiV2VkXCIsIFwiVGh1XCIsIFwiRnJpXCIsIFwiU2F0XCJdLFxuICAgICAgICBkYXlOYW1lc01pbjogW1wiU3VcIixcIk1vXCIsXCJUdVwiLFwiV2VcIixcIlRoXCIsXCJGclwiLFwiU2FcIl0sXG4gICAgICAgIG1vbnRoTmFtZXM6IFtcIkphbnVhcnlcIixcIkZlYnJ1YXJ5XCIsXCJNYXJjaFwiLFwiQXByaWxcIixcIk1heVwiLFwiSnVuZVwiLFwiSnVseVwiLFwiQXVndXN0XCIsXCJTZXB0ZW1iZXJcIixcIk9jdG9iZXJcIixcIk5vdmVtYmVyXCIsXCJEZWNlbWJlclwiXSxcbiAgICAgICAgbW9udGhOYW1lc1Nob3J0OiBbXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIixcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiXSxcbiAgICAgICAgdG9kYXk6ICdUb2RheScsXG4gICAgICAgIHdlZWtIZWFkZXI6ICdXaydcbiAgICB9XG5cbiAgICBwcml2YXRlIHRyYW5zbGF0aW9uU291cmNlID0gbmV3IFN1YmplY3Q8YW55PigpO1xuICAgIFxuICAgIHRyYW5zbGF0aW9uT2JzZXJ2ZXIgPSB0aGlzLnRyYW5zbGF0aW9uU291cmNlLmFzT2JzZXJ2YWJsZSgpO1xuICAgIFxuICAgIGdldFRyYW5zbGF0aW9uKGtleTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zbGF0aW9uW2tleV07XG4gICAgfVxuXG4gICAgc2V0VHJhbnNsYXRpb24odmFsdWU6IFRyYW5zbGF0aW9uKSB7XG4gICAgICAgIHRoaXMudHJhbnNsYXRpb24gPSB7Li4udGhpcy50cmFuc2xhdGlvbiwgLi4udmFsdWV9O1xuICAgICAgICB0aGlzLnRyYW5zbGF0aW9uU291cmNlLm5leHQodGhpcy50cmFuc2xhdGlvbik7XG4gICAgfVxufSJdfQ==